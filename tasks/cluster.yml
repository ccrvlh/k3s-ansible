---
- name: Setup environment
  include_tasks: setup.yml

- name: Get k3s installed version
  become: false
  ansible.builtin.command: k3s --version
  register: k3s_version_output
  changed_when: false
  ignore_errors: true
  failed_when: false

- name: Set k3s installed version
  become: false
  when: k3s_version_output.rc == 0
  ansible.builtin.set_fact:
    installed_k3s_version: "{{ k3s_version_output.stdout_lines[0].split(' ')[2] }}"

- name: Download artifact only if needed
  become: false
  when: k3s_version_output.rc != 0 or installed_k3s_version is version(config.version, '<') and airgap_dir is undefined
  block:
    - name: Download k3s binary
      ansible.builtin.get_url:
        url: https://get.k3s.io/
        timeout: 120
        dest: "/home/{{ ansible_user }}/.k3s/k3s.sh"
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: 0755

- name: Setup config file
  become: false
  ansible.builtin.template:
    src: "k3s-config-server.yml.j2"
    dest: "/home/{{ ansible_user }}/.k3s/config.yml"
    mode: 0644

- name: Set token
  become: false
  ansible.builtin.lineinfile:
    path: "/home/{{ ansible_user }}/.k3s/config.yml"
    regexp: "^token:"
    line: "token: {{ config.token }}"
    backrefs: yes

- name: Setup first server node cluster init
  when: inventory_hostname == groups['server'][0]
  become: false
  block:
    - name: Set cluster init for HA
      when: groups['server'] | length > 1
      ansible.builtin.lineinfile:
        path: "/home/{{ ansible_user }}/.k3s/config.yml"
        regexp: "^cluster-init:"
        line: "cluster-init: true"
        state: present

    - name: Run installation
      ansible.builtin.command:
        cmd: "/home/{{ ansible_user }}/.k3s/k3s.sh server --config /home/{{ ansible_user }}/.k3s/config.yml"

    - name: Check Master Service
      ansible.builtin.systemd:
        name: k3s
        daemon_reload: true
        state: started
        enabled: true
      failed_when: false

    - name: Wait for Master node to become Ready
      become: true
      ansible.builtin.shell:
        cmd: "kubectl get nodes --no-headers | grep -E 'Ready|master'"
      register: kubectl_output
      until: "'Ready' in kubectl_output.stdout"
      retries: 10
      delay: 5
      environment:
        KUBECONFIG: /home/{{ ansible_user }}/.kube/config

- name: Setup kubectl for user
  block:
    - name: Create kubectl symlink
      when: lookup('fileglob', '/usr/local/bin/kubectl', errors='warn') | length == 0
      ansible.builtin.file:
        src: /usr/local/bin/k3s
        dest: /usr/local/bin/kubectl
        state: link

    - name: Configure default KUBECONFIG for user
      ansible.builtin.lineinfile:
        path: ~{{ ansible_user }}/.bashrc
        regexp: "export KUBECONFIG=~/.kube/config"
        line: "export KUBECONFIG=~/.kube/config # Added by k3s-ansible"
        state: present

    - name: Configure kubectl autocomplete
      ansible.builtin.lineinfile:
        path: ~{{ ansible_user }}/.bashrc
        regexp: '\.\s+<\(kubectl completion bash\)'
        line: ". <(kubectl completion bash)  # Added by k3s-ansible"

- name: Start other servers
  become: false
  when:
    - (groups['server'] | length) > 1
    - inventory_hostname != groups['server'][0]
  block:
    - name: Set server
      ansible.builtin.lineinfile:
        path: "/home/{{ ansible_user }}/.k3s/config.yml"
        regexp: "^server:"
        line: "server: https://{{ hostvars[groups['server'][0]]['ansible_host'] }}:{{ config.https_listen_port }}"

    - name: Run installation
      ansible.builtin.command:
        cmd: "/home/{{ ansible_user }}/.k3s/k3s.sh server --config /home/{{ ansible_user }}/.k3s/config.yml"

    - name: Check Server
      ansible.builtin.systemd:
        name: k3s
        daemon_reload: true
        state: started
        enabled: true
      failed_when: false

    - name: Verify that all server nodes joined
      become: true
      ansible.builtin.command:
        cmd: >
          kubectl get nodes -l "node-role.kubernetes.io/control-plane=true" -o=jsonpath="{.items[*].metadata.name}"
      register: nodes
      until: nodes.rc == 0 and (nodes.stdout.split() | length) == (groups['server'] | length)
      retries: 20
      delay: 10
      changed_when: false

- name: Check kubectl on host
  become: false
  block:
    - name: Check whether kubectl is installed on control node
      ansible.builtin.command: "kubectl"
      register: kubectl_installed
      ignore_errors: true
      delegate_to: 127.0.0.1
      become: false
      changed_when: false

- name: Apply k3s kubeconfig to control node
  when: kubectl_installed.rc == 0
  become: false
  block:
    - name: Copy kubeconfig from first master to control node
      when: inventory_hostname == groups['server'][0]
      ansible.builtin.fetch:
        src: "/home/{{ ansible_user }}/.kube/config"
        dest: "{{ kubeconfig }}"
        flat: true

    - name: Change server address in kubeconfig on control node
      ansible.builtin.shell: |
        KUBECONFIG={{ kubeconfig }} kubectl config set-cluster default --server=https://{{ hostvars[groups['server'][0]]['ansible_host'] }}:{{ config.https_listen_port }}
      delegate_to: 127.0.0.1
      register: csa_result
      changed_when:
        - csa_result.rc == 0

    - name: Setup kubeconfig context on control node - {{ cluster_context }}
      when: kubeconfig != "~/.kube/config"
      ansible.builtin.replace:
        path: "{{ kubeconfig }}"
        regexp: "name: default"
        replace: "name: {{ cluster_context }}"
      delegate_to: 127.0.0.1

    - name: Merge with any existing kubeconfig on control node
      when: kubeconfig != "~/.kube/config"
      ansible.builtin.shell: |
        TFILE=$(mktemp)
        KUBECONFIG={{ kubeconfig }} kubectl config set-context {{ cluster_context }} --user={{ cluster_context }} --cluster={{ cluster_context }}
        KUBECONFIG={{ kubeconfig }} kubectl config view --flatten > ${TFILE}
        mv ${TFILE} {{ kubeconfig }}
      delegate_to: 127.0.0.1
      register: mv_result
      changed_when:
        - mv_result.rc == 0
