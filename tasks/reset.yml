---
- name: Stop services
  ansible.builtin.service:
    name: "{{ item }}"
    state: stopped
  loop:
    - k3s
  ignore_errors: true

- name: Run K3s Uninstall script [server]
  when: "'server' in group_names"
  ansible.builtin.command:
    cmd: k3s-uninstall.sh
    removes: /var/lib/rancher/k3s/*

- name: Run K3s Uninstall script [agent]
  when: "'agent' in group_names"
  ansible.builtin.command:
    cmd: k3s-agent-uninstall.sh
    removes: /var/lib/rancher/k3s/*

- name: Ensure K3s directories are removed after uninstall [server]
  ansible.builtin.file:
    path: /var/lib/rancher/k3s
    state: absent
  when: "'server' in group_names"

- name: Remove k3s folder
  ansible.builtin.file:
    path: /home/{{ ansible_user }}/.k3s
    state: absent

- name: Remove rancher folder
  ansible.builtin.file:
    path: /home/{{ ansible_user }}/rancher
    state: absent

- name: Remove Kube folder
  ansible.builtin.file:
    path: /home/{{ ansible_user }}/.kube
    state: absent

- name: Remove main installation folder
  ansible.builtin.shell:
    cmd: "rm -rf /home/{{ ansible_user }}/.k3s/*"
    removes: "/home/{{ ansible_user }}/.k3s/*"

- name: Remove UFW etcd rules
  when:
    - groups['server'] | length > 1
  community.general.ufw:
    delete: true
    port: "2379:2381"
    proto: tcp
    src: "{{ hostvars[item].ansible_default_ipv4.address }}"
    rule: allow
  loop: "{{ groups['server'] }}"

- name: Remove ufw cluster cidr rules
  when:
    - groups['server'] | length > 1
  community.general.ufw:
    rule: allow
    src: "{{ item }}"
    delete: true
  loop: "{{ (cluster['cluster_cidr'] + ',' + cluster['service_cidr']) | split(',') }}"
