---
- name: Set hostname to match the inventory hostname
  become: yes
  ansible.builtin.hostname:
    name: "{{ inventory_hostname }}"

- name: Enforce minimum Ansible version
  ansible.builtin.assert:
    that:
      - ansible_version.full is version('2.14', '>=')
    msg: "Minimum ansible-core version required is 2.14"

- name: Install Dependent Ubuntu Packages
  become: true
  when: ansible_distribution in ['Ubuntu']
  ansible.builtin.apt:
    name: policycoreutils # Used by install script to restore SELinux context
    update_cache: true

- name: Enable IPv4 forwarding
  become: true
  ansible.posix.sysctl:
    name: net.ipv4.ip_forward
    value: "1"
    state: present
    reload: true

- name: Enable IPv6 forwarding
  become: true
  ansible.posix.sysctl:
    name: net.ipv6.conf.all.forwarding
    value: "1"
    state: present
    reload: true
  when: ansible_all_ipv6_addresses

- name: Populate service facts
  ansible.builtin.service_facts:

- name: Allow UFW Exceptions
  become: true
  when:
    - ansible_facts.services['ufw'] is defined
    - ansible_facts.services['ufw'].state == 'running'
  block:
    - name: Get ufw status
      ansible.builtin.command:
        cmd: ufw status
      changed_when: false
      register: ufw_status

    - name: If ufw enabled, open api port
      when:
        - "'Status: active' in ufw_status['stdout']"
      community.general.ufw:
        rule: allow
        port: "{{ config.https_listen_port }}"
        proto: tcp

    - name: If ufw enabled, open etcd ports
      when:
        - "'Status: active' in ufw_status['stdout']"
        - groups['server'] | length > 1
      community.general.ufw:
        rule: allow
        port: "2379:2381"
        proto: tcp

    - name: If ufw enabled, allow default CIDRs
      when:
        - "'Status: active' in ufw_status['stdout']"
      community.general.ufw:
        rule: allow
        src: "{{ item }}"
      loop: "{{ (cluster_cidr + ',' + service_cidr) | split(',') }}"

- name: Check for Apparmor existence
  become: true
  ansible.builtin.stat:
    path: /sys/module/apparmor/parameters/enabled
  register: apparmor_enabled

- name: Check if Apparmor is enabled
  become: true
  when: apparmor_enabled.stat.exists
  ansible.builtin.command: cat /sys/module/apparmor/parameters/enabled
  register: apparmor_status
  changed_when: false

- name: Install Apparmor Parser [Debian]
  become: true
  when:
    - ansible_distribution == 'Debian'
    - ansible_facts['distribution_major_version'] == "11"
    - apparmor_status is defined
    - apparmor_status.stdout == "Y"
  ansible.builtin.package:
    name: apparmor
    state: present

- name: Gather the package facts
  ansible.builtin.package_facts:
    manager: auto

- name: If iptables v1.8.0-1.8.4, warn user # noqa ignore-errors
  become: true
  when:
    - ansible_facts.packages['iptables'] is defined
    - ansible_facts.packages['iptables'][0]['version'] is version('1.8.5', '<')
    - ansible_facts.packages['iptables'][0]['version'] is version('1.7.9', '>')
  ansible.builtin.fail:
    msg:
      - "Warning: Iptables {{ ansible_facts.packages['iptables'][0]['version'] }} found."
      - "Add '--prefer-bundled-bin' to extra_server_args variable to use the bundled iptables binary."
  ignore_errors: true

- name: Create k3s directory
  file:
    path: "/home/{{ ansible_user }}/.k3s"
    state: directory
    owner: "{{ ansible_user }}"

- name: Setup extra manifests
  when: extra_manifests is defined
  block:
    - name: Make manifests directory
      ansible.builtin.file:
        path: "/home/{{ ansible_user }}/.k3s/manifests"
        mode: 0700
        state: directory
    - name: Copy manifests
      ansible.builtin.copy:
        src: "{{ item }}"
        dest: "/home/{{ ansible_user }}/.k3s/manifests"
        mode: 0600
      loop: "{{ extra_manifests }}"

- name: Setup optional private registry configuration
  when: registries_config_yaml is defined
  block:
    - name: Make k3s config directory
      ansible.builtin.file:
        path: "/etc/rancher/k3s"
        mode: 0755
        state: directory
    - name: Copy config values
      ansible.builtin.copy:
        content: "{{ registries_config_yaml }}"
        dest: "/etc/rancher/k3s/registries.yaml"
        mode: 0644
